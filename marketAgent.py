##############################################
#Projeto: MarketSense AI - Agente de Intelig√™ncia de Mercado
#Autor: Borge Levisberg
#Baseado na Aula 5 da Imers√£o IA Alura + Google gemini
#####################################‚Ññ######‚Ññ#
import os
import textwrap
from datetime import date
import warnings
import json
from google import genai
from google.genai import types
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
import PIL.Image
from PIL import Image
import io
from io import BytesIO
import base64
import google.genai as genai_img
import asyncio
from telegram.constants import ChatAction
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import logging
import tempfile
import re
from telegram.ext import ConversationHandler
from config import(
  GOOGLE_API_KEY,
  TELEGRAM_TOKEN
  )
from dotenv import load_dotenv
load_dotenv()
# User data management
USER_DATA_FILE = 'user_data.json'

def registrar_usuario(chat_id):
    """Registra um novo usu√°rio ou garante que um usu√°rio existente tenha a estrutura de dados correta."""
    chat_id_str = str(chat_id)
    try:
        try:
            with open(USER_DATA_FILE, 'r') as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            data = {"users": {}}

        if chat_id_str not in data.get("users", {}):
            data.setdefault("users", {})[chat_id_str] = {"email": None}
            with open(USER_DATA_FILE, 'w') as f:
                json.dump(data, f, indent=4)
            logger.info(f"Novo usu√°rio registrado: {chat_id_str}")

    except Exception as e:
        logger.error(f"Erro ao registrar usu√°rio {chat_id_str}: {e}")

# Configura√ß√£o do Logging -----
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    filename='borg3_logs.txt'
)
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
console.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console)
gpt_logger = logging.getLogger("genai_logger")
logger = logging.getLogger(__name__)
warnings.filterwarnings("ignore")

# Configura√ß√£o da API ----
API_KEY = GOOGLE_API_KEY
assert API_KEY, "API Key n√£o encontrada."
os.environ["GOOGLE_API_KEY"] = API_KEY
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"

# Gerenciamento de sess√µes por chat_id ----
async def get_session(chat_id, agent_name):
    """Cria uma nova sess√£o para o chat_id e agente especificado."""
    session_service = InMemorySessionService()
    session_id = f"{agent_name}_{chat_id}"
    session = session_service.create_session(
        app_name=agent_name,
        user_id=str(chat_id),
        session_id=session_id
    )
    logger.debug(f"Sess√£o criada para chat_id {chat_id}, agente {agent_name}: {session_id}")
    return session_service, session

#Configura√ß√£o que chama o agente ----
async def call_agent(agent: Agent, message_text: str, chat_id: str, verbose=False) -> str:
    """Chama um agente com uma nova sess√£o para o chat_id."""
    try:
        session_service, session = await get_session(chat_id, agent.name)
        runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
        content = types.Content(role="user", parts=[types.Part(text=message_text)])

        final_response = ""
        async for event in runner.run_async(user_id=str(chat_id), session_id=session.id, new_message=content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text:
                        final_response += part.text + "\n"
        if verbose:
            logger.debug(f"[DEBUG: Resposta do agente {agent.name} para chat_id {chat_id}]:\n{final_response}")
        return final_response.strip()
    except ValueError as e:
        logger.error(f"Erro ao chamar agente {agent.name} para chat_id {chat_id}: {e}")
        raise
    except Exception as e:
        logger.error(f"Erro inesperado ao chamar agente {agent.name} para chat_id {chat_id}: {e}")
        raise

def criar_agente_rastreador(topico, data):
    return Agent(
        name="agente_rastreador",
        model=MODEL_ID,
        instruction = f"""
Voc√™ √© um assistente de pesquisa especializado em identificar tend√™ncias de mercado. Sua tarefa √© analisar as principais fontes da internet (como Google, redes sociais, sites de not√≠cias, f√≥runs e blogs) para descobrir os temas, hashtags e not√≠cias mais relevantes e emergentes sobre o t√≥pico: {topico}.

- Foque nos assuntos mais mencionados e engajadores dos √∫ltimos 30 dias, at√© {data}.
- Considere conte√∫dos virais, debates em alta, novos comportamentos de consumo, tecnologias emergentes, movimentos culturais e qualquer outro sinal de tend√™ncia relacionado a {topico}.
- Apresente uma lista objetiva com os principais temas, hashtags e manchetes mais relevantes e recentes.
- Caso n√£o haja informa√ß√µes suficientes, sugira ao usu√°rio refinar o t√≥pico com algo mais espec√≠fico ou atual.
- Seja claro, direto e conciso, evitando formata√ß√µes desnecess√°rias como markdowns do Telegram.
        """,
        description="Agente rastreador de tend√™ncias",
        tools=[google_search]
    )

def criar_agente_analista(topico, dados):
    return Agent(
        name="agente_analista",
        model=MODEL_ID,
        instruction=f"""
Voc√™ √© um analista de mercado s√™nior e estrategista de conte√∫do. Sua miss√£o √© transformar dados brutos sobre o t√≥pico "{topico}" em um plano de a√ß√£o claro e detalhado.

Com base nos dados fornecidos, realize uma an√°lise aprofundada e apresente suas descobertas nas seguintes se√ß√µes, utilizando uma linguagem visualmente atraente com emojis estrat√©gicos:

- **An√°lise de Tend√™ncias e Sentimento** üìà:
  - **Temas em Alta**: Identifique os 3-5 subtemas mais quentes e com maior engajamento.
  - **Sentimento Geral**: Classifique o sentimento predominante (positivo, negativo, neutro) e justifique com exemplos de men√ß√µes ou contextos.
  - **Principais Influenciadores**: Liste os principais criadores de conte√∫do, marcas ou ve√≠culos que est√£o liderando a conversa.

- **Perfil do P√∫blico-Alvo** üéØ:
  - **Demografia**: Descreva a faixa et√°ria, g√™nero e localiza√ß√£o do p√∫blico mais engajado.
  - **Interesses e Comportamentos**: Detalhe os interesses, hobbies e comportamentos de consumo do p√∫blico.
  - **Dores e Necessidades**: Identifique os principais problemas, desafios e necessidades que o p√∫blico expressa.

- **An√°lise Competitiva** ‚öîÔ∏è:
  - **Principais Concorrentes**: Identifique 2-3 concorrentes diretos ou indiretos que atuam no mesmo nicho.
  - **Estrat√©gias de Sucesso**: Analise o que est√° funcionando para eles (tipos de conte√∫do, campanhas, etc.).
  - **Lacunas e Oportunidades**: Aponte as √°reas que os concorrentes n√£o est√£o explorando e que representam uma oportunidade.

- **Recomenda√ß√µes Estrat√©gicas e de Conte√∫do** üí°:
  - **Pilares de Conte√∫do**: Sugira 3-4 pilares de conte√∫do para abordar as dores e interesses do p√∫blico.
  - **Formatos de Conte√∫do**: Recomende os formatos mais eficazes (v√≠deos curtos, blog posts, infogr√°ficos, etc.) com base no perfil do p√∫blico.
  - **Exemplos de T√≠tulos**: Forne√ßa 3 exemplos de t√≠tulos de conte√∫do que poderiam ser criados para cada pilar.

Se os dados forem insuficientes, informe ao usu√°rio de forma clara e sugira maneiras de refinar a pesquisa para obter melhores resultados. O objetivo √© entregar um relat√≥rio que sirva como um verdadeiro guia estrat√©gico.
        """,
        description="Agente de an√°lise de tend√™ncias"
    )

def criar_agente_relatorio(topico, briefing):
    return Agent(
        name="agente_relatorio",
        model=MODEL_ID,
        instruction=f"""
Voc√™ √© um especialista em marketing e comunica√ß√£o, encarregado de traduzir a an√°lise de tend√™ncias sobre "{topico}" em um plano de marketing acion√°vel.

Com base no briefing fornecido, estruture sua resposta em tr√™s se√ß√µes claras e diretas:

1. **Plano de Marketing Estrat√©gico** üöÄ:
   - **Objetivos da Campanha**: Defina 2-3 objetivos SMART (Espec√≠ficos, Mensur√°veis, Ating√≠veis, Relevantes, Temporais).
   - **Mensagem Chave**: Elabore uma mensagem central que ressoe com as "dores" e interesses do p√∫blico-alvo.
   - **Canais de Marketing**: Recomende os canais mais eficazes (ex: Instagram, TikTok, Blog, E-mail Marketing) e justifique a escolha.
   - **KPIs (Indicadores-Chave de Desempenho)**: Liste os principais KPIs para medir o sucesso da campanha (ex: taxa de engajamento, crescimento de seguidores, tr√°fego do site, taxa de convers√£o).

2. **Prompt de Imagem para Infogr√°fico** üé®:
   - **Conceito Visual**: Descreva o conceito geral do infogr√°fico (ex: "jornada do consumidor", "ecossistema de conte√∫do", "pilares da estrat√©gia").
   - **Estrutura e Layout**: Detalhe a organiza√ß√£o visual, incluindo a disposi√ß√£o dos elementos, hierarquia de informa√ß√µes e fluxo de leitura.
   - **Elementos Gr√°ficos**: Especifique os tipos de gr√°ficos (barras, pizza, linha do tempo), √≠cones, ilustra√ß√µes e a paleta de cores.
   - **Texto e Dados**: Indique os principais dados e textos que devem ser inclu√≠dos no infogr√°fico.

   **Exemplo de Prompt de Imagem**:
   "Crie um infogr√°fico vibrante e din√¢mico para uma campanha de marketing sobre {topico}. O layout deve ser dividido em quatro se√ß√µes: 'Nosso P√∫blico', 'Nossa Mensagem', 'Nossos Canais' e 'Nosso Sucesso'. Use um gr√°fico de pizza para a demografia do p√∫blico, √≠cones para representar os canais e um gr√°fico de barras para os KPIs. A paleta de cores deve ser [cor 1], [cor 2] e [cor 3], transmitindo uma sensa√ß√£o de energia e inova√ß√£o."

3. **Recomenda√ß√£o de Pr√≥ximos Passos** üë£:
   - **A√ß√µes Imediatas**: Sugira as 2-3 primeiras a√ß√µes que devem ser tomadas para colocar o plano em pr√°tica.
   - **Ferramentas √öteis**: Recomende ferramentas (ex: Canva, Google Analytics, Hootsuite) que possam auxiliar na execu√ß√£o e monitoramento da campanha.

O objetivo √© fornecer um guia pr√°tico e inspirador que capacite o usu√°rio a agir com base nos insights coletados.
        """,
        description="Gerador de relat√≥rio multimodal"
    )
#Extrai o prompt para gerar a imagem descritiva do relatorio feito pelo agente de relatorio----
def extrair_prompt_imagem(relatorio_texto):
    """Extrai o prompt de imagem do relat√≥rio."""
    marker = "Prompt da imagem:"
    if marker in relatorio_texto:
        partes = relatorio_texto.split(marker)
        if len(partes) > 1:
            prompt_bruto = partes[1].strip()
            return prompt_bruto
    return None
#gera a imagem e envia ao user----
async def gerar_e_enviar_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str):
    """Gera uma imagem e a envia ao usu√°rio via Telegram."""
    chat_id = update.effective_chat.id
    logger.info(f"Iniciando gera√ß√£o de imagem para chat_id {chat_id} com prompt: {prompt}")
    
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
        
        image_model = client.models
        contents = [prompt]
        
        response = image_model.generate_content(
            model="gemini-2.0-flash-preview-image-generation",
            contents=contents,
            config=types.GenerateContentConfig(response_modalities=['TEXT', 'IMAGE'])
        )
        
        # Verifica se a resposta cont√©m candidatos v√°lidos
        if not response.candidates or not response.candidates[0].content.parts:
            logger.warning(f"Nenhum conte√∫do de imagem retornado pela API para chat_id {chat_id}")
            await update.message.reply_text("‚ùå Nenhuma imagem foi gerada pela API.")
            return

        found_image = False
        for part in response.candidates[0].content.parts:
            if part.inline_data is not None:
                try:
                    # Extrai os dados bin√°rios da imagem----
                    image_data = part.inline_data.data
                    logger.debug(f"Dados inline recebidos para chat_id {chat_id}: {image_data[:50]}... (tamanho: {len(image_data)} bytes)")
                    
                    # Tenta abrir os dados como imagem----
                    try:
                        image = Image.open(BytesIO(image_data))
                        logger.debug(f"Imagem aberta com sucesso para chat_id {chat_id}, formato: {image.format}")
                    except PIL.UnidentifiedImageError as img_error:
                        logger.error(f"Erro ao identificar imagem para chat_id {chat_id}: {img_error}")
                        await update.message.reply_text("‚ö†Ô∏è Erro: N√£o foi poss√≠vel processar a imagem gerada.")
                        continue

                    # Salva e envia a imagem para o usu√°rio----
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_file:
                        image.save(tmp_file, format="PNG")
                        tmp_file_path = tmp_file.name

                    await context.bot.send_photo(chat_id=chat_id, photo=open(tmp_file_path, 'rb'))
                    os.remove(tmp_file_path)
                    logger.info(f"Imagem enviada com sucesso para chat_id {chat_id}")
                    
                    found_image = True
                    break  

                except Exception as inner_e:
                    logger.error(f"Erro ao processar imagem para chat_id {chat_id}: {inner_e}")
                    continue

            elif part.text is not None:
                logger.debug(f"Parte cont√©m texto para chat_id {chat_id}: {part.text[:50]}...")
            else:
                logger.debug(f"Parte sem inline_data ou texto para chat_id {chat_id}")
        
        if not found_image:
            logger.warning(f"Nenhuma imagem v√°lida encontrada na resposta da API para chat_id {chat_id}")
            await update.message.reply_text("üß© Hmm... Nada de imagem por aqui! Vamos tentar um prompt mais afiado?")

    except Exception as e:
        logger.error(f"Erro geral ao gerar imagem para chat_id {chat_id}: {e}")
        await update.message.reply_text("‚ùå Desculpe! Ocorreu um erro ao tentar gerar a imagem.")
#Processador do topico----      
async def processar_topico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o t√≥pico enviado pelo usu√°rio e executa o pipeline."""
    chat_id = update.effective_chat.id
    registrar_usuario(chat_id)
    topico = update.message.text
    hoje = str(date.today())
    logger.debug(f"Recebida mensagem do chat_id {chat_id}: {topico}")

    try:
        # Rastreamento----
        logger.info(f"Iniciando rastreamento para t√≥pico '{topico}'")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("üìä Rastreamento de tend√™ncias em andamento... Isso pode levar alguns segundos.")
        rastreador = criar_agente_rastreador(topico, hoje)
        dados = await call_agent(rastreador, f"T√≥pico: {topico}\nData: {hoje}", chat_id)
        await update.message.reply_text(dados)
        logger.debug(f"Rastreamento conclu√≠do para chat_id {chat_id}")

        # An√°lise----
        logger.info(f"Iniciando an√°lise para t√≥pico '{topico}'")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("üìà An√°lise de dados iniciada. Preparando insights estrat√©gicos...")
        analista = criar_agente_analista(topico, dados)
        briefing = await call_agent(analista, f"Dados: {dados}", chat_id)
        await update.message.reply_text(briefing)
        logger.debug(f"An√°lise conclu√≠da para chat_id {chat_id}")

        # Relat√≥rio----
        logger.info(f"Iniciando gera√ß√£o de relat√≥rio para t√≥pico '{topico}'")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("ü§ñ Relat√≥rio multimodal em constru√ß√£o... Integrando dados e visualiza√ß√µes.")
        relator = criar_agente_relatorio(topico, briefing)
        relatorio = await call_agent(relator, f"Briefing: {briefing}", chat_id)
        await update.message.reply_text(relatorio)
        logger.debug(f"Relat√≥rio conclu√≠do para chat_id {chat_id}")

        # Gera√ß√£o de Imagem----
        logger.info(f"Extraindo prompt de imagem para chat_id {chat_id}")
        prompt_imagem = extrair_prompt_imagem(relatorio)
        if prompt_imagem:
            logger.info(f"Iniciando gera√ß√£o de infogr√°fico para chat_id {chat_id}")
            await update.message.reply_text("üß¨ Transformando dados em imagem... Infogr√°fico em progresso!")
            await gerar_e_enviar_imagem(update, context, prompt_imagem)
            logger.debug(f"Infogr√°fico enviado para chat_id {chat_id}")
        else:
            logger.warning(f"N√£o foi poss√≠vel extrair prompt de imagem para chat_id {chat_id}")
            await update.message.reply_text("Desculpe! N√£o foi poss√≠vel extrair o prompt da imagem do relat√≥rio.")
    except Exception as e:
        logger.error(f"Erro ao processar t√≥pico para chat_id {chat_id}: {e}")
        await update.message.reply_text(
            f"Ocorreu um erro ao processar o t√≥pico. Tente novamente ou envie um novo t√≥pico."
        )

# Estados da conversa
ASKING_EMAIL = 0

async def promo_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Inicia o funil de captura de leads."""
    await update.message.reply_text(
        "üéâ Quer receber um resumo semanal das tend√™ncias de mercado no seu e-mail?\n\n"
        "Deixe seu melhor e-mail abaixo para se inscrever!"
    )
    return ASKING_EMAIL

async def receber_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Salva o e-mail do usu√°rio."""
    chat_id = update.effective_chat.id
    email = update.message.text

    # Valida√ß√£o simples de e-mail
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await update.message.reply_text("ü§î E-mail inv√°lido. Por favor, envie um e-mail v√°lido.")
        return ASKING_EMAIL

    try:
        with open(USER_DATA_FILE, 'r') as f:
            data = json.load(f)

        data["users"][str(chat_id)]["email"] = email

        with open(USER_DATA_FILE, 'w') as f:
            json.dump(data, f, indent=4)

        await update.message.reply_text("‚úÖ Sucesso! Seu e-mail foi registrado. Fique de olho na sua caixa de entrada!")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Erro ao salvar e-mail para {chat_id}: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao salvar seu e-mail. Tente novamente.")
        return ConversationHandler.END

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela a opera√ß√£o."""
    await update.message.reply_text("Opera√ß√£o cancelada.")
    return ConversationHandler.END

#Configura√ß√£o dk telegram----
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia uma mensagem para todos os usu√°rios registrados."""
    admin_ids = [85732168, 5913164677] # Substitua pelo seu ID de admin do Telegram
    chat_id = update.effective_chat.id

    if chat_id not in admin_ids:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    message = " ".join(context.args)
    if not message:
        await update.message.reply_text("Por favor, forne√ßa uma mensagem para o broadcast. Uso: /broadcast <mensagem>")
        return

    try:
        with open(USER_DATA_FILE, 'r') as f:
            data = json.load(f)
        users = data.get("users", {}).keys()
    except (FileNotFoundError, json.JSONDecodeError):
        users = []

    if not users:
        await update.message.reply_text("Nenhum usu√°rio registrado para receber o broadcast.")
        return

    success_count = 0
    failure_count = 0
    for user_id in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
            success_count += 1
            await asyncio.sleep(0.1)  # Evita rate limiting
        except Exception as e:
            logger.error(f"Falha ao enviar mensagem para {user_id}: {e}")
            failure_count += 1

    await update.message.reply_text(
        f"Broadcast conclu√≠do!\n"
        f"Enviado para: {success_count} usu√°rios\n"
        f"Falhas: {failure_count}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /start."""
    chat_id = update.effective_chat.id
    registrar_usuario(chat_id)
    await update.message.reply_text("Analyzer est√° on! Mande o t√≥pico que mando pra voc√™ tudo que precisa ‚ú®!")
from flask import Flask
from threading import Thread

def start_ping_server():
    app = Flask("ping_server")

    @app.route("/ping")
    def ping():
        return "pong", 200

    app.run(host="0.0.0.0", port=8080)

# Inicia o mini servidor Flask em paralelo
Thread(target=start_ping_server).start()
def main():
    """Configura e inicia o bot do Telegram no modo webhook (Render)."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Handlers
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("promo", promo_start)],
        states={
            ASKING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_email)]
        },
        fallbacks=[CommandHandler("cancelar", cancelar)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, processar_topico))

    # Configura√ß√µes para Render
    PORT = int(os.environ.get("PORT", 8080))
    WEBHOOK_URL = f"https://{os.environ.get('RENDER_EXTERNAL_URL')}/"

    # Inicia com webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()