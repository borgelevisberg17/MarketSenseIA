##############################################
#Projeto: MarketSense AI - Agente de Intelig√™ncia de Mercado
#Autor: Borge Levisberg
#Baseado na Aula 5 da Imers√£o IA Alura + Google gemini
#####################################‚Ññ######‚Ññ#
import os
import textwrap
from datetime import date
import warnings
import json
from google import genai
from google.genai import types
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
import PIL.Image
from PIL import Image
import io
from io import BytesIO
import base64
import google.genai as genai_img
import asyncio
from telegram.constants import ChatAction
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import logging
import tempfile
from config import(
  GOOGLE_API_KEY,
  TELEGRAM_TOKEN
  )
# Configura√ß√£o do Logging -----
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    filename='borg3_logs.txt'
)
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
console.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console)
gpt_logger = logging.getLogger("genai_logger")
logger = logging.getLogger(__name__)
warnings.filterwarnings("ignore")

# Configura√ß√£o da API ----
API_KEY = GOOGLE_API_KEY
assert API_KEY, "API Key n√£o encontrada."
os.environ["GOOGLE_API_KEY"] = API_KEY
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"

# Gerenciamento de sess√µes por chat_id ----
async def get_session(chat_id, agent_name):
    """Cria uma nova sess√£o para o chat_id e agente especificado."""
    session_service = InMemorySessionService()
    session_id = f"{agent_name}_{chat_id}"
    session = session_service.create_session(
        app_name=agent_name,
        user_id=str(chat_id),
        session_id=session_id
    )
    logger.debug(f"Sess√£o criada para chat_id {chat_id}, agente {agent_name}: {session_id}")
    return session_service, session

#Configura√ß√£o que chama o agente ----
async def call_agent(agent: Agent, message_text: str, chat_id: str, verbose=False) -> str:
    """Chama um agente com uma nova sess√£o para o chat_id."""
    try:
        session_service, session = await get_session(chat_id, agent.name)
        runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
        content = types.Content(role="user", parts=[types.Part(text=message_text)])

        final_response = ""
        async for event in runner.run_async(user_id=str(chat_id), session_id=session.id, new_message=content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text:
                        final_response += part.text + "\n"
        if verbose:
            logger.debug(f"[DEBUG: Resposta do agente {agent.name} para chat_id {chat_id}]:\n{final_response}")
        return final_response.strip()
    except ValueError as e:
        logger.error(f"Erro ao chamar agente {agent.name} para chat_id {chat_id}: {e}")
        raise
    except Exception as e:
        logger.error(f"Erro inesperado ao chamar agente {agent.name} para chat_id {chat_id}: {e}")
        raise

def criar_agente_rastreador(topico, data):
    return Agent(
        name="agente_rastreador",
        model=MODEL_ID,
        instruction = f"""
Voc√™ √© um assistente de pesquisa especializado em identificar tend√™ncias de mercado. Sua tarefa √© analisar as principais fontes da internet (como Google, redes sociais, sites de not√≠cias, f√≥runs e blogs) para descobrir os temas, hashtags e not√≠cias mais relevantes e emergentes sobre o t√≥pico: {topico}.

- Foque nos assuntos mais mencionados e engajadores dos √∫ltimos 30 dias, at√© {data}.
- Considere conte√∫dos virais, debates em alta, novos comportamentos de consumo, tecnologias emergentes, movimentos culturais e qualquer outro sinal de tend√™ncia relacionado a {topico}.
- Apresente uma lista objetiva com os principais temas, hashtags e manchetes mais relevantes e recentes.
- Caso n√£o haja informa√ß√µes suficientes, sugira ao usu√°rio refinar o t√≥pico com algo mais espec√≠fico ou atual.
- Seja claro, direto e conciso, evitando formata√ß√µes desnecess√°rias como markdowns do Telegram.
        """,
        description="Agente rastreador de tend√™ncias",
        tools=[google_search]
    )

def criar_agente_analista(topico, dados):
    return Agent(
        name="agente_analista",
        model=MODEL_ID,
        instruction=f"""
Voc√™ √© um analista de mercado experiente e estrat√©gico. Com base nas informa√ß√µes encontradas sobre o t√≥pico: {topico}, sua miss√£o √© extrair insights valiosos e prontos para a√ß√£o.

Analise os dados dispon√≠veis e apresente as seguintes se√ß√µes de forma clara, objetiva e visualmente atrativa com o uso moderado de emojis:

- Temas em Alta üî•: destaque os assuntos mais discutidos e relevantes relacionados ao t√≥pico.
- Sentimento Geral üìä: indique se o tom das men√ß√µes √© predominantemente positivo, negativo ou neutro.
- P√∫blico Dominante üéØ: identifique o perfil do p√∫blico mais engajado (faixa et√°ria, interesses, localiza√ß√£o, etc.).
- Palavras-chave Frequentes üß†: apresente os termos mais recorrentes que ajudam a entender o foco das conversas.
- Oportunidades üí°: sugira ideias de conte√∫do, produtos ou estrat√©gias com base nas lacunas ou interesses emergentes.

Caso os dados sejam insuficientes para uma an√°lise completa:
- Avise o usu√°rio de forma educada e direta.
- Sugira fornecer mais detalhes ou reformular com um t√≥pico mais espec√≠fico ou atual.

Resumo bem elaborado e direto ao ponto, com foco na clareza, utilidade e capta√ß√£o de insights. Evite rodeios e formata√ß√µes complexas.
        """,
        description="Agente de an√°lise de tend√™ncias"
    )

def criar_agente_relatorio(topico, briefing):
    return Agent(
        name="agente_relatorio",
        model=MODEL_ID,
        instruction=f"""
Voc√™ √© um gerador de relat√≥rio profissional sobre o tema: {topico}.

Com base no briefing de dados coletados, sua tarefa √© gerar tr√™s se√ß√µes:

1. Resumo Executivo 
Apresente um resumo claro e direto com os principais insights do tema. N√£o utilize markdowns nem estilos de formata√ß√£o. Use emojis de forma estrat√©gica para destacar os pontos mais relevantes, mas mantenha um estilo conciso e objetivo.

2. Prompt de Imagem para o Gemini Image 
Forne√ßa um prompt detalhado no seguinte formato, pronto para ser usado diretamente:

Prompt da imagem:  
Crie um infogr√°fico moderno e tecnol√≥gico com fundo claro e visual estilo dashboard, ilustrando:  
- Principais temas de destaque encontrados no briefing (liste 2 ou 3)  
- Representa√ß√£o visual com gr√°ficos: gr√°fico de barras (para mostrar crescimento ou compara√ß√£o), gr√°fico de pizza (para distribui√ß√£o de p√∫blico ou categorias), ou outro formato ideal  
- √çcones ou elementos visuais que representem palavras-chave mencionadas  
- P√∫blico-alvo principal de forma simb√≥lica (ex: silhuetas, avatares ou pictogramas)  
- Estilo moderno, tecnol√≥gico, com luz suave e boa hierarquia visual

Use vocabul√°rio visual, t√©cnico e descritivo. Evite ambiguidade e seja espec√≠fico para evitar erros na gera√ß√£o da imagem.

3. Recomenda√ß√£o de Gr√°fico Ideal  
Indique o melhor tipo de gr√°fico para representar os dados obtidos (ex: barras, linhas, pizza, radar) e justifique brevemente com base nos dados apresentados, no tipo de informa√ß√£o e na clareza visual.

Se os dados forem insuficientes, sinalize de forma direta e sugira ao usu√°rio complementar o briefing ou definir um t√≥pico mais espec√≠fico.
        """,
        description="Gerador de relat√≥rio multimodal"
    )
#Extrai o prompt para gerar a imagem descritiva do relatorio feito pelo agente de relatorio----
def extrair_prompt_imagem(relatorio_texto):
    """Extrai o prompt de imagem do relat√≥rio."""
    marker = "Prompt da imagem:"
    if marker in relatorio_texto:
        partes = relatorio_texto.split(marker)
        if len(partes) > 1:
            prompt_bruto = partes[1].strip()
            return prompt_bruto
    return None
#gera a imagem e envia ao user----
async def gerar_e_enviar_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str):
    """Gera uma imagem e a envia ao usu√°rio via Telegram."""
    chat_id = update.effective_chat.id
    logger.info(f"Iniciando gera√ß√£o de imagem para chat_id {chat_id} com prompt: {prompt}")
    
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
        
        image_model = client.models
        contents = [prompt]
        
        response = image_model.generate_content(
            model="gemini-2.0-flash-preview-image-generation",
            contents=contents,
            config=types.GenerateContentConfig(response_modalities=['TEXT', 'IMAGE'])
        )
        
        # Verifica se a resposta cont√©m candidatos v√°lidos
        if not response.candidates or not response.candidates[0].content.parts:
            logger.warning(f"Nenhum conte√∫do de imagem retornado pela API para chat_id {chat_id}")
            await update.message.reply_text("‚ùå Nenhuma imagem foi gerada pela API.")
            return

        found_image = False
        for part in response.candidates[0].content.parts:
            if part.inline_data is not None:
                try:
                    # Extrai os dados bin√°rios da imagem----
                    image_data = part.inline_data.data
                    logger.debug(f"Dados inline recebidos para chat_id {chat_id}: {image_data[:50]}... (tamanho: {len(image_data)} bytes)")
                    
                    # Tenta abrir os dados como imagem----
                    try:
                        image = Image.open(BytesIO(image_data))
                        logger.debug(f"Imagem aberta com sucesso para chat_id {chat_id}, formato: {image.format}")
                    except PIL.UnidentifiedImageError as img_error:
                        logger.error(f"Erro ao identificar imagem para chat_id {chat_id}: {img_error}")
                        await update.message.reply_text("‚ö†Ô∏è Erro: N√£o foi poss√≠vel processar a imagem gerada.")
                        continue

                    # Salva e envia a imagem para o usu√°rio----
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_file:
                        image.save(tmp_file, format="PNG")
                        tmp_file_path = tmp_file.name

                    await context.bot.send_photo(chat_id=chat_id, photo=open(tmp_file_path, 'rb'))
                    os.remove(tmp_file_path)
                    logger.info(f"Imagem enviada com sucesso para chat_id {chat_id}")
                    
                    found_image = True
                    break  

                except Exception as inner_e:
                    logger.error(f"Erro ao processar imagem para chat_id {chat_id}: {inner_e}")
                    continue

            elif part.text is not None:
                logger.debug(f"Parte cont√©m texto para chat_id {chat_id}: {part.text[:50]}...")
            else:
                logger.debug(f"Parte sem inline_data ou texto para chat_id {chat_id}")
        
        if not found_image:
            logger.warning(f"Nenhuma imagem v√°lida encontrada na resposta da API para chat_id {chat_id}")
            await update.message.reply_text("üß© Hmm... Nada de imagem por aqui! Vamos tentar um prompt mais afiado?")

    except Exception as e:
        logger.error(f"Erro geral ao gerar imagem para chat_id {chat_id}: {e}")
        await update.message.reply_text("‚ùå Desculpe! Ocorreu um erro ao tentar gerar a imagem.")
#Processador do topico----      
async def processar_topico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o t√≥pico enviado pelo usu√°rio e executa o pipeline."""
    chat_id = update.effective_chat.id
    topico = update.message.text
    hoje = str(date.today())
    logger.debug(f"Recebida mensagem do chat_id {chat_id}: {topico}")

    try:
        # Rastreamento----
        logger.info(f"Iniciando rastreamento para t√≥pico '{topico}'")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("üìä Rastreamento de tend√™ncias em andamento... Isso pode levar alguns segundos.")
        rastreador = criar_agente_rastreador(topico, hoje)
        dados = await call_agent(rastreador, f"T√≥pico: {topico}\nData: {hoje}", chat_id)
        await update.message.reply_text(dados)
        logger.debug(f"Rastreamento conclu√≠do para chat_id {chat_id}")

        # An√°lise----
        logger.info(f"Iniciando an√°lise para t√≥pico '{topico}'")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("üìà An√°lise de dados iniciada. Preparando insights estrat√©gicos...")
        analista = criar_agente_analista(topico, dados)
        briefing = await call_agent(analista, f"Dados: {dados}", chat_id)
        await update.message.reply_text(briefing)
        logger.debug(f"An√°lise conclu√≠da para chat_id {chat_id}")

        # Relat√≥rio----
        logger.info(f"Iniciando gera√ß√£o de relat√≥rio para t√≥pico '{topico}'")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("ü§ñ Relat√≥rio multimodal em constru√ß√£o... Integrando dados e visualiza√ß√µes.")
        relator = criar_agente_relatorio(topico, briefing)
        relatorio = await call_agent(relator, f"Briefing: {briefing}", chat_id)
        await update.message.reply_text(relatorio)
        logger.debug(f"Relat√≥rio conclu√≠do para chat_id {chat_id}")

        # Gera√ß√£o de Imagem----
        logger.info(f"Extraindo prompt de imagem para chat_id {chat_id}")
        prompt_imagem = extrair_prompt_imagem(relatorio)
        if prompt_imagem:
            logger.info(f"Iniciando gera√ß√£o de infogr√°fico para chat_id {chat_id}")
            await update.message.reply_text("üß¨ Transformando dados em imagem... Infogr√°fico em progresso!")
            await gerar_e_enviar_imagem(update, context, prompt_imagem)
            logger.debug(f"Infogr√°fico enviado para chat_id {chat_id}")
        else:
            logger.warning(f"N√£o foi poss√≠vel extrair prompt de imagem para chat_id {chat_id}")
            await update.message.reply_text("Desculpe! N√£o foi poss√≠vel extrair o prompt da imagem do relat√≥rio.")
    except Exception as e:
        logger.error(f"Erro ao processar t√≥pico para chat_id {chat_id}: {e}")
        await update.message.reply_text(
            f"Ocorreu um erro ao processar o t√≥pico. Tente novamente ou envie um novo t√≥pico."
        )
#Configura√ß√£o dk telegram----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /start."""
    await update.message.reply_text("Analyzer est√° on! Mande o t√≥pico que mando pra voc√™ tudo que precisa ‚ú®!")

def main():
    """Configura e inicia o bot do Telegram."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, processar_topico))

    application.run_polling()

if __name__ == "__main__":
    main()